var mobiusforms =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
module.exports = __webpack_require__(2);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var helpers_1 = __webpack_require__(3);
var recaptcha_1 = __webpack_require__(4);
var mailchimp_1 = __webpack_require__(5);
var App = /** @class */ (function () {
    function App(moduleId) {
        this.helper = new helpers_1.Helpers();
        this.recaptcha = new recaptcha_1.Recaptcha();
        this.mailChimp = new mailchimp_1.MailChimp();
        this.alreadyInit = false;
        this.c = {
            clsWrp: 'app-jqfs-wrapper',
            clsForm: 'app-jqfs-form',
        };
        // disable validate on the global asp.net form, to not interfere with the contact-form
        $('form').attr('novalidate', '');
        this.moduleWrapper = $(".DnnModule-" + moduleId);
    }
    App.prototype.initialize = function () {
        var _this = this;
        var wrapper = this.moduleWrapper;
        // attach validation to enable as soon as we blur        
        wrapper.on('blur', ':input', this.attachFieldValidateOnBlur);
        wrapper.each(function (i, item) {
            // prevent dupl execution
            if (_this.alreadyInit)
                return;
            var wrap = $(item);
            wrap.find('#sendFormWithApi').on('click', function (evt) { return _this.send(evt); }); // handle click event
            _this.alreadyInit = true;
        });
        this.mailChimp.init(wrapper);
    };
    App.prototype.send = function (event) {
        var _this = this;
        var data = [];
        var btn = event.currentTarget;
        var sxc = $2sxc(btn);
        var wrapper = this.moduleWrapper;
        // clear all alerts
        this.helper.showOneAlert(wrapper, '');
        // Validate form
        if (!wrapper.smkValidate())
            return this.helper.showOneAlert(wrapper, 'msgIncomplete');
        // Do Recaptcha test, show alert & fail if required and not complete
        var recap = this.recaptcha.check(wrapper);
        if (!recap)
            return this.helper.showOneAlert(wrapper, 'msgRecap');
        // get data 
        // data = this.manuallyBuildData(wrapper); // alternative example with manual build, but we prefer automatic
        this.autoCollectData().then(function (data) {
            var ws = wrapper.find('.app-jqfs-wrapper').data('webservice'); // should be "Form/ProcessForm" or a custom override
            data.Recaptcha = recap;
            // submission
            _this.helper.disableInputs(wrapper, true);
            _this.helper.showOneAlert(wrapper, 'msgSending'); // show "sending..."
            sxc.webApi.post(ws, {}, data, true)
                .success(function () {
                _this.helper.showOneAlert(wrapper, 'msgOk');
                $(btn).hide();
            })
                .error(function () {
                _this.helper.showOneAlert(wrapper, 'msgError');
                _this.helper.disableInputs(wrapper, false);
            });
        });
    };
    // automatically build the send-object with all properties, 
    // based on all form-fields which have a item-property=""
    App.prototype.autoCollectData = function () {
        var data = {
            Files: []
        };
        var fields = this.moduleWrapper.find(':input');
        function add(i, e) {
            e = $(e);
            // get the property name from special-attribut, name OR id
            var propName = e.attr('name') || e.attr('id');
            if (!propName)
                return;
            // extract data from file fields
            if (e.attr('type') && e.attr('type').toLowerCase() == 'file') {
                var deferred_1 = $.Deferred();
                var file_1 = e.get(0).files[0];
                if (!file_1)
                    return;
                var reader_1 = new FileReader();
                reader_1.addEventListener('load', function () {
                    data.Files.push({
                        Encoded: reader_1.result,
                        Name: file_1.name,
                        Field: propName
                    });
                    deferred_1.resolve();
                }, false);
                reader_1.readAsDataURL(file_1);
                return deferred_1.promise();
            }
            else { // For all standard fields, set value directly
                data[propName] = e.val();
            }
        }
        var promises = fields.map(function (i, field) { return add(i, field); });
        return $.when.apply($, promises).then(function () {
            return data;
        });
    };
    App.prototype.manuallyBuildData = function (wrapper) {
        var data = {
            Subject: wrapper.find('#subject'),
            Message: wrapper.find('#message'),
            SenderName: wrapper.find('#sendername'),
            SenderMail: wrapper.find('#sendermail')
        };
        for (var prop in data) {
            if (data.hasOwnProperty(prop)) {
                data[prop] = data[prop].val();
            }
        }
        return data;
    };
    App.prototype.attachFieldValidateOnBlur = function () {
        // skif if validation is already enabled
        if ($(this).data('alreadyRun')) {
            return;
        }
        // not yet enabled, let's enable and remember...
        $(this).smkValidate();
        $(this).data('alreadyRun', true);
    };
    return App;
}());
exports.App = App;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var Helpers = /** @class */ (function () {
    function Helpers() {
    }
    Helpers.prototype.showOneAlert = function (wrapper, showId) {
        wrapper.find('.alert').hide();
        if (showId !== '') {
            wrapper.find('#' + showId).show();
        }
    };
    Helpers.prototype.disableInputs = function (wrapper, state) {
        wrapper.toggleClass('disable', state);
        wrapper.find(':input').prop('disabled', state);
    };
    return Helpers;
}());
exports.Helpers = Helpers;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var helpers_1 = __webpack_require__(3);
var Recaptcha = /** @class */ (function () {
    function Recaptcha() {
        this.helper = new helpers_1.Helpers();
        this.c = {
            recapId: "recapId",
            clsRecap: "app-jqfs-recaptcha",
            clsRecapWrap: "app-recaptcha-wrapper"
        };
    }
    Recaptcha.prototype.init = function (wrapper) {
        var recap = wrapper.find(this.c.clsRecap);
        if (!isNaN(wrapper.data(this.c.recapId))) {
            return;
        }
        var id = grecaptcha.render(recap, {
            'sitekey': recap.data("sitekey"),
            'size': 'normal'
        });
        wrapper.data(this.c.recapId, id); // remember for later use       
    };
    Recaptcha.prototype.check = function (wrapper) {
        var recap = wrapper.find("." + this.c.clsRecap);
        // if no recaptcha found, probably ok
        if (recap.length === 0) {
            return true;
        }
        // if many found, probably not ok
        if (recap.length !== 1) {
            throw "recaptcha not found";
        }
        // return google response for the recap
        var res = grecaptcha.getResponse(); // null if failed, something cryptic if ok
        return res || false;
    };
    return Recaptcha;
}());
exports.Recaptcha = Recaptcha;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.__esModule = true;
var helpers_1 = __webpack_require__(3);
var MailChimp = /** @class */ (function () {
    function MailChimp() {
        this.helper = new helpers_1.Helpers();
        this.c = {
            clsWrp: 'app-jqfs-wrapper',
            clsForm: 'app-jqfs-form',
        };
    }
    MailChimp.prototype.init = function (wrapper) {
        var _this = this;
        this.moduleWrapper = wrapper;
        wrapper.find('#subToMc').on('click', function (evt) { return _this.send(evt); }); // handle click event
    };
    MailChimp.prototype.send = function (event) {
        var wrapper = this.moduleWrapper;
        var btn = event.currentTarget;
        var sxc = $2sxc(btn);
        // Validate form
        if (!wrapper.smkValidate())
            return this.helper.showOneAlert(wrapper, 'msgIncomplete');
        var u = {
            mail: wrapper.find('.sender-mail').val(),
            name: wrapper.find('.sender-name').val(),
            surname: wrapper.find('.sender-surname').val()
        };
        sxc.webApi.post("Mailchimp/Subscribe", { email: u.mail, fname: u.name, lname: u.surname }, null, true)
            .success(function () {
            $(".app-jqfs-form-mailchimp").fadeOut();
            $("#NewsletterSuccessMsg").fadeIn();
        })
            .error(function () {
            $(".app-jqfs-form-mailchimp").fadeOut();
            $("#NewsletterFailedMsg").fadeIn();
        });
    };
    return MailChimp;
}());
exports.MailChimp = MailChimp;


/***/ })
/******/ ]);